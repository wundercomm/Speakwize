create table "public"."profiles" (
    "id" uuid not null,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "name" text
);


create table "public"."site_newsletter_subscriptions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "email" text
);


alter table "public"."site_newsletter_subscriptions" enable row level security;

create table "public"."tasks" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "title" text,
    "completed" boolean,
    "user" uuid
);


CREATE UNIQUE INDEX site_newsletter_subscriptions_id_key ON public.site_newsletter_subscriptions USING btree (id);

CREATE UNIQUE INDEX site_newsletter_subscriptions_pkey ON public.site_newsletter_subscriptions USING btree (id);

CREATE UNIQUE INDEX tasks_id_key ON public.tasks USING btree (id);

CREATE UNIQUE INDEX tasks_pkey ON public.tasks USING btree (id);

alter table "public"."site_newsletter_subscriptions" add constraint "site_newsletter_subscriptions_pkey" PRIMARY KEY using index "site_newsletter_subscriptions_pkey";

alter table "public"."tasks" add constraint "tasks_pkey" PRIMARY KEY using index "tasks_pkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."site_newsletter_subscriptions" add constraint "site_newsletter_subscriptions_id_key" UNIQUE using index "site_newsletter_subscriptions_id_key";

alter table "public"."tasks" add constraint "tasks_id_key" UNIQUE using index "tasks_id_key";

create policy "Enable insert access for all public"
on "public"."site_newsletter_subscriptions"
as permissive
for all
to public
with check (true);



